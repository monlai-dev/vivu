definitions:
  request_models.AddPoiToJourneyRequest:
    properties:
      end_time:
        type: string
      journey_id:
        type: string
      poi_id:
        type: string
      start_time:
        type: string
    required:
    - journey_id
    - poi_id
    type: object
  request_models.CreatePaymentRequest:
    properties:
      plan_code:
        type: string
      user_id:
        type: string
    required:
    - plan_code
    - user_id
    type: object
  request_models.CreatePoiRequest:
    properties:
      address:
        type: string
      category:
        type: string
      contact_info:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      opening_hours:
        type: string
      poi_details:
        $ref: '#/definitions/request_models.PoiDetails'
      province:
        type: string
    type: object
  request_models.DeletePoiRequest:
    properties:
      id:
        type: string
    required:
    - id
    type: object
  request_models.ForgotPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - email
    - new_password
    - token
    type: object
  request_models.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  request_models.PlanOnlyRequest:
    properties:
      session_id:
        type: string
    type: object
  request_models.PoiDetails:
    properties:
      description:
        type: string
      images:
        items:
          type: string
        type: array
    type: object
  request_models.QuizQuestion:
    properties:
      category:
        description: '"destination", "budget", "activities", "accommodation", "dining",
          "travel_style"'
        type: string
      id:
        type: string
      max_value:
        type: integer
      min_value:
        type: integer
      options:
        items:
          type: string
        type: array
      placeholder:
        type: string
      question:
        type: string
      required:
        type: boolean
      type:
        description: '"single_choice", "multiple_choice", "text", "range"'
        type: string
    type: object
  request_models.QuizRequest:
    properties:
      answers:
        additionalProperties:
          type: string
        type: object
      session_id:
        type: string
      user_id:
        type: string
    type: object
  request_models.QuizStartRequest:
    properties:
      user_id:
        type: string
    type: object
  request_models.RemovePoiFromJourneyRequest:
    properties:
      journey_id:
        type: string
      poi_id:
        type: string
    required:
    - journey_id
    - poi_id
    type: object
  request_models.RequestForgotPassword:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request_models.RequestVerifyOtpToken:
    properties:
      email:
        type: string
      token:
        type: string
    required:
    - email
    - token
    type: object
  request_models.SignUpRequest:
    properties:
      display_name:
        maxLength: 50
        minLength: 3
        type: string
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - display_name
    - email
    - password
    type: object
  request_models.UpdatePoiRequest:
    properties:
      address:
        type: string
      category:
        type: string
      contact_info:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      opening_hours:
        type: string
      poi_details:
        $ref: '#/definitions/request_models.PoiDetails'
      province:
        type: string
    required:
    - id
    type: object
  response_models.DistanceMatrix:
    additionalProperties:
      additionalProperties:
        $ref: '#/definitions/response_models.MatrixEdge'
      type: object
    type: object
  response_models.JourneyActivityDetail:
    properties:
      activity_type:
        type: string
      end_time:
        type: string
      id:
        type: string
      notes:
        type: string
      selected_poi:
        $ref: '#/definitions/response_models.POISummary'
      time:
        description: RFC3339 date/time
        type: string
    type: object
  response_models.JourneyDayResponse:
    properties:
      activities:
        items:
          $ref: '#/definitions/response_models.JourneyActivityDetail'
        type: array
      date:
        description: RFC3339 date
        type: string
      day_number:
        type: integer
      id:
        type: string
    type: object
  response_models.JourneyDetailResponse:
    properties:
      days:
        description: Plan details
        items:
          $ref: '#/definitions/response_models.JourneyDayResponse'
        type: array
      duration_days:
        description: computed (inclusive or exclusiveâ€”your call; see mapper)
        type: integer
      end_date:
        description: RFC3339 date/time
        type: string
      id:
        type: string
      is_completed:
        type: boolean
      is_shared:
        type: boolean
      start_date:
        description: RFC3339 date/time
        type: string
      title:
        type: string
      total_activities:
        type: integer
      total_days:
        description: Quick stats
        type: integer
    type: object
  response_models.JourneyResponse:
    properties:
      end_date:
        type: string
      id:
        type: string
      location:
        type: string
      start_date:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  response_models.MatrixEdge:
    properties:
      distance_meters:
        type: integer
    type: object
  response_models.POI:
    properties:
      address:
        type: string
      category:
        type: string
      contact_info:
        type: string
      distance_to_next_meters:
        type: integer
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      next_leg_map_url:
        type: string
      opening_hours:
        type: string
      poi_details:
        $ref: '#/definitions/response_models.PoiDetails'
    type: object
  response_models.POISummary:
    properties:
      address:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      status:
        type: string
    type: object
  response_models.PlanOnly:
    properties:
      created_at:
        type: string
      days:
        items:
          $ref: '#/definitions/response_models.PlanOnlyDay'
        type: array
      destination:
        type: string
      distance_matrix:
        $ref: '#/definitions/response_models.DistanceMatrix'
      duration_days:
        type: integer
    type: object
  response_models.PlanOnlyActivity:
    properties:
      distance_to_next_meters:
        type: integer
      end_time:
        description: '"11:00"'
        type: string
      main_poi:
        $ref: '#/definitions/response_models.POI'
      main_poi_id:
        type: string
      next_leg_map_url:
        type: string
      start_time:
        description: '"09:00"'
        type: string
    type: object
  response_models.PlanOnlyDay:
    properties:
      activities:
        items:
          $ref: '#/definitions/response_models.PlanOnlyActivity'
        type: array
      day:
        type: integer
    type: object
  response_models.PoiDetails:
    properties:
      description:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
    type: object
  response_models.ProvinceResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  response_models.QuizResponse:
    properties:
      current_step:
        type: integer
      is_complete:
        type: boolean
      next_endpoint:
        type: string
      questions:
        items:
          $ref: '#/definitions/request_models.QuizQuestion'
        type: array
      session_id:
        type: string
      total_steps:
        type: integer
    type: object
  response_models.TagResponse:
    properties:
      en:
        type: string
      icon:
        type: string
      id:
        type: string
      vi:
        type: string
    type: object
  utils.APIResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: string
      trace_id:
        type: string
    type: object
info:
  contact: {}
paths:
  /accounts/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a password reset link to the provided email if it exists
      parameters:
      - description: Forgot password payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.RequestForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Request a password reset
      tags:
      - Accounts
  /accounts/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Login to an account
      tags:
      - Accounts
  /accounts/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Account registration payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Register a new account
      tags:
      - Accounts
  /accounts/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password using a valid OTP token
      parameters:
      - description: Password reset payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Reset password with OTP
      tags:
      - Accounts
  /accounts/verify-otp:
    post:
      consumes:
      - application/json
      description: Validates the provided OTP token for account verification
      parameters:
      - description: OTP token verification payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.RequestVerifyOtpToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Verify an OTP token
      tags:
      - Accounts
  /journeys/add-poi-to-journey:
    post:
      consumes:
      - application/json
      description: Add a point of interest (POI) to a specific journey with optional
        start and end times
      parameters:
      - description: Journey ID, POI ID, Start Time, End Time
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.AddPoiToJourneyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Add POI to journey
      tags:
      - Journey
  /journeys/get-details-info-of-journey-by-id/{journeyId}:
    get:
      consumes:
      - application/json
      description: Fetch detailed information about a specific journey by its ID
      parameters:
      - description: Journey ID
        in: path
        name: journeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.JourneyDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get journey details by ID
      tags:
      - Journey
  /journeys/get-journey-by-userid:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of journeys for the authenticated user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/response_models.JourneyResponse'
              type: array
            type: array
      security:
      - BearerAuth: []
      summary: Get journeys by user ID
      tags:
      - Journey
  /journeys/remove-poi-from-journey:
    post:
      consumes:
      - application/json
      description: Remove a point of interest (POI) from a specific journey
      parameters:
      - description: Journey ID, POI ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.RemovePoiFromJourneyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Remove POI from journey
      tags:
      - Journey
  /payments/create-checkout:
    post:
      consumes:
      - application/json
      description: Create a checkout request for a subscription plan
      parameters:
      - description: Create Payment Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a checkout request for a subscription plan
      tags:
      - Payments
  /pois/create-poi:
    post:
      consumes:
      - application/json
      description: Create a new Point of Interest (POI)
      parameters:
      - description: POI creation payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.CreatePoiRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Create a new POI
      tags:
      - POIs
  /pois/delete-poi:
    delete:
      consumes:
      - application/json
      description: Delete a Point of Interest (POI) by its ID
      parameters:
      - description: POI deletion payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.DeletePoiRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete a POI
      tags:
      - POIs
  /pois/pois-details/{id}:
    get:
      description: Fetch a Point of Interest (POI) by its ID
      parameters:
      - description: POI ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.POI'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get POI by ID
      tags:
      - POIs
  /pois/provinces/{provinceId}:
    get:
      description: Fetch a list of POIs by province ID with pagination
      parameters:
      - description: Province ID
        in: path
        name: provinceId
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.POI'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get POIs by Province
      tags:
      - POIs
  /pois/update-poi:
    put:
      consumes:
      - application/json
      description: Update a Point of Interest (POI) by its ID
      parameters:
      - description: POI update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.UpdatePoiRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update a POI
      tags:
      - POIs
  /prompt/quiz/answer:
    post:
      consumes:
      - application/json
      description: Process answers for a quiz session
      parameters:
      - description: Quiz answers and session ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.QuizRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.QuizResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Submit quiz answers
      tags:
      - Prompt
  /prompt/quiz/plan-only:
    post:
      consumes:
      - application/json
      description: Generate a travel plan based on session ID
      parameters:
      - description: Session ID for plan generation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.PlanOnlyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.PlanOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Generate a travel plan without quiz
      tags:
      - Prompt
  /prompt/quiz/start:
    post:
      consumes:
      - application/json
      description: Start a quiz session for the user
      parameters:
      - description: User ID for quiz session
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.QuizStartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.QuizResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Start a travel quiz
      tags:
      - Prompt
  /provinces/find-by-name/{province_name}:
    get:
      consumes:
      - application/json
      description: Fetch province details by its name
      parameters:
      - description: Province Name
        in: path
        name: province_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.ProvinceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Find province by name
      tags:
      - Provinces
  /provinces/list-all:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of provinces
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 5, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.ProvinceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get all provinces
      tags:
      - Provinces
  /tags/list-all:
    get:
      description: Fetch a paginated list of all tags
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.TagResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: List all tags
      tags:
      - Tags
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
