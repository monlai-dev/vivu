// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts/forgot-password": {
            "post": {
                "description": "Sends a password reset link to the provided email if it exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Request a password reset",
                "parameters": [
                    {
                        "description": "Forgot password payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.RequestForgotPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/accounts/login": {
            "post": {
                "description": "Authenticate a user and return a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Login to an account",
                "parameters": [
                    {
                        "description": "Login payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/accounts/register": {
            "post": {
                "description": "Create a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Register a new account",
                "parameters": [
                    {
                        "description": "Account registration payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/accounts/reset-password": {
            "post": {
                "description": "Resets the user's password using a valid OTP token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Reset password with OTP",
                "parameters": [
                    {
                        "description": "Password reset payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/accounts/verify-otp": {
            "post": {
                "description": "Validates the provided OTP token for account verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Verify an OTP token",
                "parameters": [
                    {
                        "description": "OTP token verification payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.RequestVerifyOtpToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/journeys/add-poi-to-journey": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a point of interest (POI) to a specific journey with optional start and end times",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Journey"
                ],
                "summary": "Add POI to journey",
                "parameters": [
                    {
                        "description": "Journey ID, POI ID, Start Time, End Time",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.AddPoiToJourneyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/journeys/get-details-info-of-journey-by-id/{journeyId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch detailed information about a specific journey by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Journey"
                ],
                "summary": "Get journey details by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Journey ID",
                        "name": "journeyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response_models.JourneyDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/journeys/get-journey-by-userid": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch a paginated list of journeys for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Journey"
                ],
                "summary": "Get journeys by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 5,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/response_models.JourneyResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/journeys/remove-poi-from-journey": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a point of interest (POI) from a specific journey",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Journey"
                ],
                "summary": "Remove POI from journey",
                "parameters": [
                    {
                        "description": "Journey ID, POI ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.RemovePoiFromJourneyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/pois/create-poi": {
            "post": {
                "description": "Create a new Point of Interest (POI)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POIs"
                ],
                "summary": "Create a new POI",
                "parameters": [
                    {
                        "description": "POI creation payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.CreatePoiRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/pois/pois-details/{id}": {
            "get": {
                "description": "Fetch a Point of Interest (POI) by its ID",
                "tags": [
                    "POIs"
                ],
                "summary": "Get POI by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "POI ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response_models.POI"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/pois/provinces/{provinceId}": {
            "get": {
                "description": "Fetch a list of POIs by province ID with pagination",
                "tags": [
                    "POIs"
                ],
                "summary": "Get POIs by Province",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Province ID",
                        "name": "provinceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 5,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response_models.POI"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/prompt/quiz/answer": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Process answers for a quiz session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt"
                ],
                "summary": "Submit quiz answers",
                "parameters": [
                    {
                        "description": "Quiz answers and session ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.QuizRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response_models.QuizResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/prompt/quiz/plan-only": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a travel plan based on session ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt"
                ],
                "summary": "Generate a travel plan without quiz",
                "parameters": [
                    {
                        "description": "Session ID for plan generation",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.PlanOnlyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response_models.PlanOnly"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/prompt/quiz/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a quiz session for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt"
                ],
                "summary": "Start a travel quiz",
                "parameters": [
                    {
                        "description": "User ID for quiz session",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_models.QuizStartRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response_models.QuizResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/provinces/list-all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch a paginated list of provinces",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Provinces"
                ],
                "summary": "Get all provinces",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 5, max: 100)",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response_models.ProvinceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        },
        "/tags/list-all": {
            "get": {
                "description": "Fetch a paginated list of all tags",
                "tags": [
                    "Tags"
                ],
                "summary": "List all tags",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 5,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response_models.TagResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request_models.AddPoiToJourneyRequest": {
            "type": "object",
            "required": [
                "journey_id",
                "poi_id"
            ],
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "journey_id": {
                    "type": "string"
                },
                "poi_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "request_models.CreatePoiRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "contact_info": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "opening_hours": {
                    "type": "string"
                },
                "poi_details": {
                    "$ref": "#/definitions/request_models.PoiDetails"
                },
                "province": {
                    "type": "string"
                }
            }
        },
        "request_models.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email",
                "new_password",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 6
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "request_models.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "request_models.PlanOnlyRequest": {
            "type": "object",
            "properties": {
                "session_id": {
                    "type": "string"
                }
            }
        },
        "request_models.PoiDetails": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request_models.QuizQuestion": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "\"destination\", \"budget\", \"activities\", \"accommodation\", \"dining\", \"travel_style\"",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "max_value": {
                    "type": "integer"
                },
                "min_value": {
                    "type": "integer"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "placeholder": {
                    "type": "string"
                },
                "question": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "description": "\"single_choice\", \"multiple_choice\", \"text\", \"range\"",
                    "type": "string"
                }
            }
        },
        "request_models.QuizRequest": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "session_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request_models.QuizStartRequest": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request_models.RemovePoiFromJourneyRequest": {
            "type": "object",
            "required": [
                "journey_id",
                "poi_id"
            ],
            "properties": {
                "journey_id": {
                    "type": "string"
                },
                "poi_id": {
                    "type": "string"
                }
            }
        },
        "request_models.RequestForgotPassword": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "request_models.RequestVerifyOtpToken": {
            "type": "object",
            "required": [
                "email",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "request_models.SignUpRequest": {
            "type": "object",
            "required": [
                "display_name",
                "email",
                "password"
            ],
            "properties": {
                "display_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "response_models.DistanceMatrix": {
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/definitions/response_models.MatrixEdge"
                }
            }
        },
        "response_models.JourneyActivityDetail": {
            "type": "object",
            "properties": {
                "activity_type": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "selected_poi": {
                    "$ref": "#/definitions/response_models.POISummary"
                },
                "time": {
                    "description": "RFC3339 date/time",
                    "type": "string"
                }
            }
        },
        "response_models.JourneyDayResponse": {
            "type": "object",
            "properties": {
                "activities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response_models.JourneyActivityDetail"
                    }
                },
                "date": {
                    "description": "RFC3339 date",
                    "type": "string"
                },
                "day_number": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "response_models.JourneyDetailResponse": {
            "type": "object",
            "properties": {
                "days": {
                    "description": "Plan details",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response_models.JourneyDayResponse"
                    }
                },
                "duration_days": {
                    "description": "computed (inclusive or exclusive—your call; see mapper)",
                    "type": "integer"
                },
                "end_date": {
                    "description": "RFC3339 date/time",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_completed": {
                    "type": "boolean"
                },
                "is_shared": {
                    "type": "boolean"
                },
                "start_date": {
                    "description": "RFC3339 date/time",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "total_activities": {
                    "type": "integer"
                },
                "total_days": {
                    "description": "Quick stats",
                    "type": "integer"
                }
            }
        },
        "response_models.JourneyResponse": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "response_models.MatrixEdge": {
            "type": "object",
            "properties": {
                "distance_meters": {
                    "type": "integer"
                }
            }
        },
        "response_models.POI": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "contact_info": {
                    "type": "string"
                },
                "distance_to_next_meters": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "next_leg_map_url": {
                    "type": "string"
                },
                "opening_hours": {
                    "type": "string"
                },
                "poi_details": {
                    "$ref": "#/definitions/response_models.PoiDetails"
                }
            }
        },
        "response_models.POISummary": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response_models.PlanOnly": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "days": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response_models.PlanOnlyDay"
                    }
                },
                "destination": {
                    "type": "string"
                },
                "distance_matrix": {
                    "$ref": "#/definitions/response_models.DistanceMatrix"
                },
                "duration_days": {
                    "type": "integer"
                }
            }
        },
        "response_models.PlanOnlyActivity": {
            "type": "object",
            "properties": {
                "distance_to_next_meters": {
                    "type": "integer"
                },
                "end_time": {
                    "description": "\"11:00\"",
                    "type": "string"
                },
                "main_poi": {
                    "$ref": "#/definitions/response_models.POI"
                },
                "main_poi_id": {
                    "type": "string"
                },
                "next_leg_map_url": {
                    "type": "string"
                },
                "start_time": {
                    "description": "\"09:00\"",
                    "type": "string"
                }
            }
        },
        "response_models.PlanOnlyDay": {
            "type": "object",
            "properties": {
                "activities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response_models.PlanOnlyActivity"
                    }
                },
                "day": {
                    "type": "integer"
                }
            }
        },
        "response_models.PoiDetails": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "response_models.ProvinceResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "response_models.QuizResponse": {
            "type": "object",
            "properties": {
                "current_step": {
                    "type": "integer"
                },
                "is_complete": {
                    "type": "boolean"
                },
                "next_endpoint": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/request_models.QuizQuestion"
                    }
                },
                "session_id": {
                    "type": "string"
                },
                "total_steps": {
                    "type": "integer"
                }
            }
        },
        "response_models.TagResponse": {
            "type": "object",
            "properties": {
                "en": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "vi": {
                    "type": "string"
                }
            }
        },
        "utils.APIResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
