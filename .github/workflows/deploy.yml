name: CI/CD Build and Deploy to EC2

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: monlaine123/vivu:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v3

      - name: 🐳 Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🏗️ Build Docker image
        run: docker build --platform=linux/amd64 -t $IMAGE_NAME .

      - name: 🚀 Push Docker image to Docker Hub
        run: docker push $IMAGE_NAME

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-deploy  # Wait until build job is done
    environment: staging

    steps:
      - name: 🔐 Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: 🛰️ Deploy to EC2 via SSH
        shell: bash
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          REPO_URL: ${{ secrets.REPO_URL }}
          RDS_CONNECTION: ${{ secrets.RDS_CONNECTION }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          PORT: 8080
        run: |
          ssh -o StrictHostKeyChecking=no "$EC2_HOST" "
          set -e
          
          echo '🐳 Ensuring Docker is running'
          if ! systemctl is-active --quiet docker; then
            sudo dnf -y install docker
            sudo systemctl enable --now docker
            sudo usermod -aG docker ec2-user
          fi
          
          echo '🧩 Checking Docker Compose installation'
          if ! docker compose version &>/dev/null && ! docker-compose version &>/dev/null; then
            echo 'Installing Docker Compose v2 plugin'
            COMPOSE_VERSION='v2.29.7'
            ARCH=\$(uname -m)
            URL=\"https://github.com/docker/compose/releases/download/\${COMPOSE_VERSION}/docker-compose-linux-\${ARCH}\"
          
            sudo mkdir -p /usr/libexec/docker/cli-plugins
            sudo curl -sSL \"\$URL\" -o /usr/libexec/docker/cli-plugins/docker-compose
            sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose
            sudo ln -sf /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
          else
            echo 'Docker Compose already installed'
          fi

          echo '🔐 Setting up Docker permissions and login'
          # Ensure docker group membership is active and fix permissions
          sudo chown ec2-user:docker /var/run/docker.sock 2>/dev/null || true
          
          # Fix .docker directory ownership and permissions
          sudo mkdir -p ~/.docker
          sudo chown -R ec2-user:ec2-user ~/.docker
          sudo chmod -R 700 ~/.docker
          
          # Use newgrp to activate docker group membership for this session
          newgrp docker <<DOCKERCMD
          echo '$DOCKER_PASSWORD' | docker login -u '$DOCKER_USERNAME' --password-stdin

          echo '🧾 Creating configuration files'
          cat > .env <<EOT
          ENV=\$ENV
          RDS_CONNECTION=$RDS_CONNECTION
          EOT
          
          cat > docker-compose.yml <<YML
          services:
            app:
              image: $IMAGE_NAME
              container_name: vivu
              env_file: .env
              ports:
                - '$PORT:$PORT'
              restart: unless-stopped
              pull_policy: always
          YML
          
          echo '🚀 Deploying application'
          docker-compose down --remove-orphans 2>/dev/null || true
          docker-compose pull
          docker-compose up -d
          
          echo '✅ Deployment completed'
          docker-compose ps
          DOCKERCMD
          "